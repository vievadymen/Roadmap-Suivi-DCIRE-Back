<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Structure extends \App\Entity\Structure implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'libelle', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'extraction', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'typeStructure', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'activite', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'evenement', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'typeServices', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'users', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'color', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'semaine', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'difficulte'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'libelle', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'extraction', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'typeStructure', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'activite', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'evenement', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'typeServices', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'users', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'color', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'semaine', '' . "\0" . 'App\\Entity\\Structure' . "\0" . 'difficulte'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Structure $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getLibelle(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLibelle', []);

        return parent::getLibelle();
    }

    /**
     * {@inheritDoc}
     */
    public function setLibelle(string $libelle): \App\Entity\Structure
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLibelle', [$libelle]);

        return parent::setLibelle($libelle);
    }

    /**
     * {@inheritDoc}
     */
    public function getExtraction(): ?\App\Entity\Extraction
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExtraction', []);

        return parent::getExtraction();
    }

    /**
     * {@inheritDoc}
     */
    public function setExtraction(?\App\Entity\Extraction $extraction): \App\Entity\Structure
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExtraction', [$extraction]);

        return parent::setExtraction($extraction);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeStructure(): ?\App\Entity\TypeStructure
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeStructure', []);

        return parent::getTypeStructure();
    }

    /**
     * {@inheritDoc}
     */
    public function setTypeStructure(?\App\Entity\TypeStructure $typeStructure): \App\Entity\Structure
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypeStructure', [$typeStructure]);

        return parent::setTypeStructure($typeStructure);
    }

    /**
     * {@inheritDoc}
     */
    public function getActivite(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActivite', []);

        return parent::getActivite();
    }

    /**
     * {@inheritDoc}
     */
    public function addActivite(\App\Entity\Activite $activite): \App\Entity\Structure
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addActivite', [$activite]);

        return parent::addActivite($activite);
    }

    /**
     * {@inheritDoc}
     */
    public function removeActivite(\App\Entity\Activite $activite): \App\Entity\Structure
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeActivite', [$activite]);

        return parent::removeActivite($activite);
    }

    /**
     * {@inheritDoc}
     */
    public function getEvenement(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEvenement', []);

        return parent::getEvenement();
    }

    /**
     * {@inheritDoc}
     */
    public function addEvenement(\App\Entity\Evenement $evenement): \App\Entity\Structure
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEvenement', [$evenement]);

        return parent::addEvenement($evenement);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEvenement(\App\Entity\Evenement $evenement): \App\Entity\Structure
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEvenement', [$evenement]);

        return parent::removeEvenement($evenement);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeServices(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeServices', []);

        return parent::getTypeServices();
    }

    /**
     * {@inheritDoc}
     */
    public function addTypeService(\App\Entity\TypeService $typeService): \App\Entity\Structure
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTypeService', [$typeService]);

        return parent::addTypeService($typeService);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTypeService(\App\Entity\TypeService $typeService): \App\Entity\Structure
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTypeService', [$typeService]);

        return parent::removeTypeService($typeService);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsers(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsers', []);

        return parent::getUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function addUser(\App\Entity\User $user): \App\Entity\Structure
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUser', [$user]);

        return parent::addUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUser(\App\Entity\User $user): \App\Entity\Structure
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUser', [$user]);

        return parent::removeUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getColor(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getColor', []);

        return parent::getColor();
    }

    /**
     * {@inheritDoc}
     */
    public function setColor(?string $color): \App\Entity\Structure
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setColor', [$color]);

        return parent::setColor($color);
    }

    /**
     * {@inheritDoc}
     */
    public function getSemaine(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSemaine', []);

        return parent::getSemaine();
    }

    /**
     * {@inheritDoc}
     */
    public function setSemaine(?int $semaine): \App\Entity\Structure
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSemaine', [$semaine]);

        return parent::setSemaine($semaine);
    }

    /**
     * {@inheritDoc}
     */
    public function getDifficulte(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDifficulte', []);

        return parent::getDifficulte();
    }

    /**
     * {@inheritDoc}
     */
    public function addDifficulte(\App\Entity\Difficulte $difficulte): \App\Entity\Structure
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDifficulte', [$difficulte]);

        return parent::addDifficulte($difficulte);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDifficulte(\App\Entity\Difficulte $difficulte): \App\Entity\Structure
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDifficulte', [$difficulte]);

        return parent::removeDifficulte($difficulte);
    }

}
